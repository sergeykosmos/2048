#include <SFML/Graphics.hpp>
#include <string>
#include <sstream>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int x, o,  b, y, n, k2048=0;
    n=3;/////////////////////////ввод размеров матрицы
    o=n*n;
    char X[1];
    char *p1;
    sf::RectangleShape** lst;
    sf::Text** t;
    t = new sf::Text*[n];
    lst = new sf::RectangleShape*[n];
    int** a;
    a = new int*[n];
    for ( int i = 0; i < n; i++){
        a[i] = new int[n];
        t[i] = new sf::Text [n];
        lst[i] = new sf::RectangleShape [n];
    }
    sf::Font font;
    sf::Text T;
    int p=400;
    font.loadFromFile("arial.ttf");
    int c;

    for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
            a[i][j]=0;
            }}


    sf::RenderWindow window(sf::VideoMode(400, 400), "SFML works!");


    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            lst[i][j].setPosition(sf::Vector2f(10*4/n+100*i*4/n, 10*4/n+100*j*4/n));
            lst[i][j].setSize(sf::Vector2f(80*4/n,80*4/n));
            lst[i][j].setFillColor(sf::Color::Blue);
        }
    }
    x=1;

    while (k2048!=1 && o!=0)//начало
    {

    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down ) && x==0)//вниз
    {

        x=1;

        Sleep(p);
        for (int u = 0; u < n-1; u++){
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[i][j]==0)
            {
              a[i][j]=a[i-1][j];
              a[i-1][j]=0;
            }}}}
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[i][j]==a[i-1][j])
            {

              a[i-1][j]=2*a[i][j];
              a[i][j]=0;
            }}}
        for (int u = 0; u < n-1; u++){
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[i][j]==0)
            {
              a[i][j]=a[i-1][j];
              a[i-1][j]=0;
            }}}}}

    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up ) && x==0)//вверх
    {
        x=1;
        Sleep(p);
        for (int u = 0; u < n-1; u++){
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[i][j]==0)
            {
              a[i][j]=a[i+1][j];
              a[i+1][j]=0;
            }}}}
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[i][j]==a[i+1][j])
            {
              a[i][j]=2*a[i+1][j];
              a[i+1][j]=0;
            }}}
        for (int u = 0; u < n-1; u++){
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[i][j]==0)
            {
              a[i][j]=a[i+1][j];
              a[i+1][j]=0;
            }}}}}


    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && x==0)//налево
    {
        x=1;
        Sleep(p);
        for (int u = 0; u < n-1; u++){
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[j][i]==0)
            {
              a[j][i]=a[j][i+1];
              a[j][i+1]=0;
            }}}}
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[j][i]==a[j][i+1])
            {
              a[j][i]=2*a[j][i];
              a[j][i+1]=0;
            }}}
        for (int u = 0; u < n-1; u++){
        for(int i = 0; i < n-1; i++){
        for(int j = 0; j < n; j++){
            if (a[j][i]==0)
            {
              a[j][i]=a[j][i+1];
              a[j][i+1]=0;
            }}}}
    }

    if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Right))&& x==0)//направо
    {
        x=1;
        Sleep(p);
        for (int u = 0; u < n-1; u++){
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[j][i]==0)
            {
              a[j][i]=a[j][i-1];
              a[j][i-1]=0;
            }}}}
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[j][i]==a[j][i-1])
            {
              a[j][i]=2*a[j][i];
              a[j][i-1]=0;
            }}}
        for (int u = 0; u < n-1; u++){
        for(int i = n-1; i > 0; i--){
        for(int j = n-1; j >= 0; j--){
            if (a[j][i]==0)
            {
              a[j][i]=a[j][i-1];
              a[j][i-1]=0;
            }}}}

    }

/*  for(int i = 0; i < 4; i++){
        for(int j = 0; j < 4; j++){
               std::cout<< a[i][j] <<std::endl;
    }}  */


      o=0;
        for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if (a[i][j]==0)
            {
                o++;
                if (a[i][j]==2048)
                {
                    k2048=1;
                }
            }
        }
    }



    if (o!=0 && x == 1)
    {
        c=1+rand()%n;
        b=1+rand()%n;
        while (x==1)
        {
            c=rand()%n;
            b=rand()%n;
            if (a[c][b]==0)
            {
                y=rand();
                if (y%10==0)
                {
                    a[c][b]=4;
                }
                else
                {
                    a[c][b]=2;
                }
                x=0;
                }
        }
    }






    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){

             p1 = itoa(a[i][j],X ,10);
             t[j][i].setString(p1);

             t[i][j].setFont(font);
             t[i][j].setCharacterSize(30*4/n);
             t[i][j].setColor(sf::Color::White);
             t[i][j].setPosition(sf::Vector2f(30*4/n+100*i*4/n, 30*4/n+100*j*4/n));

        }
    }
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        window.clear();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                lst[i][j].setFillColor(sf::Color(a[i][j]/4+10,a[i][j]/6+20, a[i][j]/13+30));
                if (a[j][i] ==0){
                     t[i][j].setColor(sf::Color::Blue);
                }
                if (a[j][i] ==0){
                    lst[i][j].setFillColor(sf::Color::Blue);
                }
                if (a[j][i] ==2){
                    lst[i][j].setFillColor(sf::Color::Yellow);
                }
                if (a[j][i] ==4){
                    lst[i][j].setFillColor(sf::Color(255, 140, 0));
                }
                if (a[j][i] ==8){
                    lst[i][j].setFillColor(sf::Color(255, 69, 0));
                }
                if (a[j][i] ==16){
                    lst[i][j].setFillColor(sf::Color(102, 205, 170));
                }
                window.draw(lst[i][j]);
                window.draw(t[i][j]);
            }
        }
        if (k2048==1)
    {
            T.setString("pobedil");
            T.setFont(font);
            T.setCharacterSize(100);
            T.setColor(sf::Color::Red);
            sf::RectangleShape l;
            l.setPosition(sf::Vector2f(0, 0));
            l.setSize(sf::Vector2f(400,400));
            l.setFillColor(sf::Color::Black);
            std::cout<< 1 <<std::endl;
            window.draw(l);
            T.setPosition(sf::Vector2f(50,30));
            window.draw(T);
            window.display();
            Sleep(5000);

    }
    if (o==0)
    {
            T.setString("proigral");
            T.setFont(font);
            T.setCharacterSize(100);
            T.setColor(sf::Color::Red);
            sf::RectangleShape l;
            l.setPosition(sf::Vector2f(0, 0));
            l.setSize(sf::Vector2f(400,400));
            l.setFillColor(sf::Color::Black);
            std::cout<< 1 <<std::endl;
            window.draw(l);
            T.setPosition(sf::Vector2f(50,30));
            window.draw(T);
            window.display();
            Sleep(5000);

    }
    window.display();
    }
    for (int i = 0; i < n; i++) {
        free(a[i]);
        free(lst[i]);
		free(t[i]);
	}
	free(lst);
	free(t);
	free(a);
    return 0;
}

